cat << CTAG
{
    name:CPUGLOBAL,
		elements:[
			{ STitleBar:{
				title:"CPU Global Settings"
			}},
			`if [ -d /sys/devices/system/cpu/cpufreq/all_cpus/ ]; then
				$BB echo '{ SSeekBar:{
					title:"CPU0 Max Normal Frequency.",
					description:"Maximum CPU-Speed for CPU0. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:1890000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu0"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU1 Max Normal Frequency.",
					description:"Maximum CPU-Speed for CPU1. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:1890000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu1"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU2 Max Normal Frequency.",
					description:"Maximum CPU-Speed for CPU2. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:1890000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu2"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU3 Max Normal Frequency.",
					description:"Maximum CPU-Speed for CPU3. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:1890000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu3"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU0 Min Normal Frequency.",
					description:"Minimum CPU-Speed for CPU0. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:378000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu0"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU1 Min Normal Frequency.",
					description:"Minimum CPU-Speed for CPU1. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:378000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu1"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU2 Min Normal Frequency.",
					description:"Minimum CPU-Speed for CPU2. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:378000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu2"
				}},'
				$BB echo '{ SSeekBar:{
					title:"CPU3 Min Normal Frequency.",
					description:"Minimum CPU-Speed for CPU3. CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:378000,
					action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu3"
				}},'
			fi`
			{ STitleBar:{
				title:"CPU Idle and Power Settings"
			}},
			`if [ -f "/sys/kernel/sched/gentle_fair_sleepers" ]; then
				$BB echo '{ SCheckBox:{
					label:"Enable GENTLE_FAIR_SLEEPERS",
					description:"Disabling GENTLE_FAIR_SLEEPERS may give you better UI responsiveness.",
					default:0,
					action:"generic /sys/kernel/sched/gentle_fair_sleepers"
				}},'
			fi`
			`if [ -f "/sys/kernel/sched/arch_power" ]; then
				$BB echo '{ SCheckBox:{
					label:"Enable ARCH_POWER",
					description:"Arch Power patch causes arch dependent power functions to be used instead of generic high resolution timer ticks and double ticks.",
					default:0,
					action:"generic /sys/kernel/sched/arch_power"
				}},'
			fi`
			`if [ -f "/sys/module/workqueue/parameters/power_efficient" ]; then
				$BB echo '{ SCheckBox:{
					label:"Enable Power Efficient WQ",
					description:"Enable or disable Power-efficient Workqueues will help to reduce power consumption at the cost of slight performance overhead. By enabling this, PE workqueues are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU 0.",
					default:1,
					action:"boolean /sys/module/workqueue/parameters/power_efficient"
				}},'
			fi`
			`if [ -d /sys/kernel/cpufreq_limit_manager/ ]; then
				HFGPS=$(cat /sys/kernel/cpufreq_limit_manager/scaling_max_gps_freq);
				$BB echo '{ SSeekBar:{
					title:"Maximum CPUs speed while using GPS.",
					description:"CPU Frequency steps by 108.000 kHz, from 810.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:810000,
					max:1890000,
					default:'$HFGPS',
					action:"generic /sys/kernel/cpufreq_limit_manager/scaling_max_gps_freq"
				}},'
				HFCALL=$(cat /sys/kernel/cpufreq_limit_manager/scaling_max_oncall_freq);
				$BB echo '{ SSeekBar:{
					title:"Maximum ON CALL CPUs speed.",
					description:"CPU Frequency steps by 108.000 kHz, from 810.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:810000,
					max:1890000,
					default:'$HFCALL',
					action:"generic /sys/kernel/cpufreq_limit_manager/scaling_max_oncall_freq"
				}},'
				HFSUSP=$(cat /sys/kernel/cpufreq_limit_manager/scaling_max_suspend_freq);
				$BB echo '{ SSeekBar:{
					title:"Maximum DEEP SLEEP CPUs speed.",
					description:"CPU Frequency steps by 108.000 kHz, from 810.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:810000,
					max:1890000,
					default:'$HFSUSP',
					action:"generic /sys/kernel/cpufreq_limit_manager/scaling_max_suspend_freq"
				}},'
				LFSUSP=$(cat /sys/kernel/cpufreq_limit_manager/scaling_min_suspend_freq);
				$BB echo '{ SSeekBar:{
					title:"Minimum DEEP SLEEP CPUs speed.",
					description:"CPU Frequency steps by 108.000 kHz, from 378.000 kHz to 1.890.000 kHz!",
					unit:"kHz",
					step:108000,
					min:378000,
					max:1890000,
					default:'$LFSUSP',
					action:"generic /sys/kernel/cpufreq_limit_manager/scaling_min_suspend_freq"
				}},'
			fi`
		]
}
CTAG
